rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

		// default to shutting out all access
    match /{document=**} {
      allow read, create, update, delete: if false;
    }

		// setup access to runs
    match /runs/{run} {
    	function isAuthed() {
    		return request.auth != null && request.auth.uid != null && request.auth.token != null && request.auth.token.user_id != null && request.auth.token.user_type != null && request.auth.token.class_hash != null;
    	}
      function isTeacher() {
      	return request.auth.token.user_type == 'teacher';
      }
      function claimMatchesRun(claim) {
      	return exists(/databases/$(database)/documents/runs/$(run)) &&
               get(/databases/$(database)/documents/runs/$(run)).data[claim] == request.auth.token[claim]
      }
      function isOwner() {
        return isAuthed() && claimMatchesRun("user_id");
      }
      function isTeacherOfClass() {
      	return isAuthed() && isTeacher() && claimMatchesRun("class_hash");
      }
      function isOwnerOrTeacherOfClass() {
        return isOwner() || isTeacherOfClass();
      }

      // only allow students or teachers to read their own run docs
    	allow read: if isOwnerOrTeacherOfClass();

      // allow ANY authed user to create run docs
      allow create: if isAuthed();

      // only allow students or teachers to update their own run docs
      allow update: if isOwnerOrTeacherOfClass();

      // same as /runs/{run} EXCEPT to create you must own the run
      match /experiments/{experiment} {
        allow read: if isOwnerOrTeacherOfClass();
        allow create: if isOwner();
        allow update: if isOwnerOrTeacherOfClass();
      }

      // same as /runs/{run} EXCEPT to create you must own the run
      match /photos/{photo} {
        allow read: if isOwnerOrTeacherOfClass();
        allow create: if isOwner();
        allow update: if isOwnerOrTeacherOfClass();
      }
  	}
  }
}